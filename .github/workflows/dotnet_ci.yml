name: Template for unit and integration tests execution

on:
  workflow_call:
    inputs:
      execute_integration_tests:
        type: boolean
        required: true
      dotnet_version:
        type: string
        required: false
        default: 3.x
      dotnet_test_args:
        description: "Use for additional debugging purposes, i.e. '--blame-hang-timeout 30s' to check nonobvious issues"
        type: string
        required: false
        default: '--no-build --verbosity normal --collect:"XPlat Code Coverage" --logger trx --results-directory coverage'
      unit_test_filter:
        type: string
        required: false
        default: UnitTests
      integration_test_filter:
        type: string
        required: false
        default: IntegrationTests
      integration_test_dir:
        description: "Subdirectory containing integration tests project"
        type: string
        required: false
        default: "IntegrationTests/"
      job_timeout:
        description: "Job timeout in minutes. Tests should be very fast, so even default 60 minutes should be an overkill."
        type: number
        required: false
        default: 60

    secrets:
      integration_tests_appsettings:
        required: true

jobs:
  unitTests:
    name: Run unit tests
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.job_timeout }}
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Run Unit Tests
      run: dotnet test ${{ inputs.dotnet_test_args }} --filter ${{ inputs.unit_test_filter }}
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: unit-tests-coverage
        path: coverage/*/coverage.cobertura.xml
        
  integrationTests:
    name: Run integration tests
    if: ${{ inputs.execute_integration_tests }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.job_timeout }}
    steps:
    - uses: actions/checkout@v3
    - name: Create AppSettings.json
      shell: pwsh
      run: |
        cd ${{ inputs.integration_test_dir }}
        $contents = @"
          ${{ secrets.integration_tests_appsettings }}
        "@
        $json = $contents | ConvertFrom-Json
        $json | ConvertTo-Json | Out-File "appsettings.json"
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
    - name: Install & run Azurite
      run: npm install -g azurite
    - name: Run Azurite in Background
      shell: bash
      run: azurite-blob &
    - name: Run Integration Tests
      run: dotnet test ${{ inputs.dotnet_test_args }} --filter ${{ inputs.integration_test_filter }}
    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: integration-tests-coverage
        path: coverage/*/coverage.cobertura.xml
      
  checkCodeCoverage:
    name: Check code coverage
    needs: [ unitTests, integrationTests ]
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.job_timeout }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ inputs.dotnet_version }}
      - name: Install dotNET Coverage tool
        run: dotnet tool install --global dotnet-coverage
      - name: Download unit tests coverage report
        uses: actions/download-artifact@v3
        with:
          name: unit-tests-coverage
          path: coverage
      - name: Download integration tests coverage report
        uses: actions/download-artifact@v3
        with:
          name: integration-tests-coverage
          path: coverage
      - name: Merge coverage reports
        run: dotnet-coverage merge coverage.cobertura.xml --recursive --output-format cobertura --output coverage/merged.coverage.cobertura.xml
#       - name: show files
#         run: ls -R
      - name: Code coverage summary report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage/merged.coverage.cobertura.xml
          badge: true
          format: 'markdown'
          output: 'both'
      - name: Add coverage PR comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
      - name: Write to job summary
        if: github.event_name == 'pull_request'
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
