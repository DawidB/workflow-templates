name: Template for unit and integration tests execution

on:
  workflow_call:
    inputs:
      execute_integration_tests:
        type: boolean
        required: true
      dotnet_version:
        type: string
        required: false
        default: 3.x
      unit_test_filter:
        type: string
        required: false
        default: UnitTests
      integration_test_filter:
        type: string
        required: false
        default: IntegrationTests
      integration_test_dir:
        type: string
        required: false
        default: "IntegrationTests/"
      dotnet_test_args:
        type: string
        required: false
        default: "--no-build --verbosity normal"

    secrets:
      integration_tests_appsettings:
        required: true

jobs:
  unitTests:
    name: Run unit tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Run Unit Tests
      run: dotnet test ${{ inputs.dotnet_test_args }} --filter ${{ inputs.unit_test_filter }}
        
  integrationTests:
    name: Run integration tests
    if: ${{ inputs.execute_integration_tests }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Create AppSettings.json
      shell: pwsh
      run: |
        cd ${{ inputs.integration_test_dir }}
        $contents = @"
          ${{ secrets.integration_tests_appsettings }}
        "@
        $json = $contents | ConvertFrom-Json
        $json | ConvertTo-Json | Out-File "appsettings.json"
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: ${{ inputs.dotnet_version }}
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Setup Node.js environment
      uses: actions/setup-node@v3
    - name: Install & run Azurite
      run: npm install -g azurite
    - name: Run Azurite in Background
      shell: bash
      run: azurite-blob &
    - name: Run Integration Tests
      run: dotnet test ${{ inputs.dotnet_test_args }} --filter ${{ inputs.integration_test_filter }}
